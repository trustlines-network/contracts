import pytest

from web3 import Web3
from hexbytes import HexBytes

IDENTITY_INITCODE = "0x6080604052600060025534801561001557600080fd5b50610aaa806100256000396000f3fe60806040526004361061004a5760003560e01c806319ab453c1461004c578063333daf921461007f57806352631ab41461014d578063b9780f8614610174578063e0298e271461037b575b005b34801561005857600080fd5b5061004a6004803603602081101561006f57600080fd5b50356001600160a01b03166103ab565b34801561008b57600080fd5b50610139600480360360408110156100a257600080fd5b813591908101906040810160208201356401000000008111156100c457600080fd5b8201836020820111156100d657600080fd5b803590602001918460018302840111640100000000831117156100f857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610445945050505050565b604080519115158252519081900360200190f35b34801561015957600080fd5b5061016261046d565b60408051918252519081900360200190f35b34801561018057600080fd5b50610139600480360361012081101561019857600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156101d357600080fd5b8201836020820111156101e557600080fd5b8035906020019184600183028401116401000000008311171561020757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929567ffffffffffffffff853516956001600160a01b036020870135169560408101359550919350915060808101906060013564010000000081111561027f57600080fd5b82018360208201111561029157600080fd5b803590602001918460018302840111640100000000831117156102b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561030657600080fd5b82018360208201111561031857600080fd5b8035906020019184600183028401116401000000008311171561033a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610473945050505050565b34801561038757600080fd5b506101396004803603604081101561039e57600080fd5b508035906020013561079a565b600054600160a01b900460ff16156103f757604051600160e51b62461bcd02815260040180806020018281038252602a815260200180610a1e602a913960400191505060405180910390fd5b6000805474ff0000000000000000000000000000000000000000196001600160a01b0390931673ffffffffffffffffffffffffffffffffffffffff199091161791909116600160a01b179055565b60008061045284846107c8565b6000546001600160a01b039081169116149150505b92915050565b60025481565b60006001600160a01b038a1630146104bf57604051600160e51b62461bcd028152600401808060200182810382526037815260200180610a486037913960400191505060405180910390fd5b60006104d18b8b8b8b8b8b8b8b610899565b90506104dd8184610445565b61051b57604051600160e51b62461bcd0281526004018080602001828103825260268152602001806109f86026913960400191505060405180910390fd5b610525858261079a565b6105795760408051600160e51b62461bcd02815260206004820181905260248201527f546865207472616e73616374696f6e206e6f6e636520697320696e76616c6964604482015290519081900360640190fd5b8461059f576000818152600160208190526040909120805460ff191690911790556105a9565b6002805460010190555b600060608b6001600160a01b03168b8b6040518082805190602001908083835b602083106105e85780518252601f1990920191602091820191016105c9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461064a576040519150601f19603f3d011682016040523d82523d6000602084013e61064f565b606091505b5060408051868152831515602082015281519395509193507fdf049f3849afba7cf7c84a8771effe7c9d2717526386710dc956b319769a2cdb92918290030190a167ffffffffffffffff8916158015906106a857508115155b1561078757604080517fa24c289400000000000000000000000000000000000000000000000000000000815233600482015267ffffffffffffffff8b166024820152905189916001600160a01b0383169163a24c28949160448082019260009290919082900301818387803b15801561072057600080fd5b505af1158015610734573d6000803e3d6000fd5b50506040805167ffffffffffffffff8e1681526001600160a01b038d16602082015281517fa333dfeaa8f821b8b241a5c54e3f536a7c1b5d35c0d09429e851ab857817f0a29450908190039091019150a1505b5060019c9b505050505050505050505050565b6000826107ba575060008181526001602052604090205460ff1615610467565b506002546001018214610467565b60008060008084516041146107e35760009350505050610467565b50505060208201516040830151606084015160001a601b81101561080557601b015b8060ff16601b1415801561081d57508060ff16601c14155b1561082e5760009350505050610467565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015610885573d6000803e3d6000fd5b505050602060405103519350505050610467565b600080868051906020012090506000601960f81b600060f81b8c8c8c868c8c8c8c604051602001808b6001600160f81b0319166001600160f81b03191681526001018a6001600160f81b0319166001600160f81b0319168152600101896001600160a01b03166001600160a01b031660601b8152601401886001600160a01b03166001600160a01b031660601b81526014018781526020018681526020018567ffffffffffffffff1667ffffffffffffffff1660c01b8152600801846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106109a05780518252601f199092019160209182019101610981565b6001836020036101000a0380198251168184511680821785525050505050509050019a505050505050505050505060405160208183030381529060405280519060200120905080925050509897505050505050505056fe546865207472616e73616374696f6e207369676e6174757265206973206e6f742076616c696454686520636f6e74726163742068617320616c7265616479206265656e20696e697469616c697365642e546865207472616e73616374696f6e206973206e6f74206d65616e7420666f722074686973206964656e7469747920636f6e7472616374a165627a7a723058208a42566d0b6c3445dfb5c6da716f7303d26a1df938552e0c64c80c240e6e98790029"


# deterministically computes the smart contract address given
# the account the will deploy the contract (factory contract)
# the salt as uint256 and the contract bytecode
def build_create2_address(
    deployer_address,
    bytecode,
    salt="0x0000000000000000000000000000000000000000000000000000000000000000",
):
    hashed_bytecode = Web3.solidityKeccak(["bytes"], [bytecode])
    to_hash = ["0xff", deployer_address, salt, hashed_bytecode]
    abi_types = ["bytes1", "address", "bytes32", "bytes32"]

    return Web3.solidityKeccak(abi_types, to_hash)[12:]


@pytest.fixture(scope="session")
def identity_factory(deploy_contract, web3):

    identity_factory = deploy_contract(
        "IdentityFactory", constructor_args=[IDENTITY_INITCODE]
    )

    return identity_factory


@pytest.fixture(scope="session")
def owner(accounts):
    return accounts[0]


def test_deploy_identity_at_precomputed_address(
    identity_factory, owner, contract_assets, web3
):
    identity_factory.functions.deployIdentity(owner).transact()

    deployed_event = identity_factory.events.DeployedIdentity.getLogs()[0]
    identity_address = deployed_event["args"]["identity"]

    built_address = build_create2_address(identity_factory.address, IDENTITY_INITCODE)

    identity_contract = web3.eth.contract(
        address=identity_address,
        abi=contract_assets["Identity"]["abi"],
        bytecode=contract_assets["Identity"]["bytecode"],
    )

    assert HexBytes(identity_address) == built_address


def test_build_create2_address_conform_to_EIP1014():
    """
	Tests out two examples given in https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1014.md
	"""
    assert build_create2_address(
        "0x0000000000000000000000000000000000000000", "0x00"
    ) == HexBytes("0x4D1A2e2bB4F88F0250f26Ffff098B0b30B26BF38")
    assert build_create2_address(
        Web3.toChecksumAddress("0x00000000000000000000000000000000deadbeef"),
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0x00000000000000000000000000000000000000000000000000000000cafebabe",
    ) == HexBytes("0x1d8bfDC5D46DC4f61D6b6115972536eBE6A8854C")
